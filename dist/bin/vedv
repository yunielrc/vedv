#!/usr/bin/env bash
#
# A tool for developing with reproducible virtual machines environments
#

set -euEo pipefail

# CONSTANTS
readonly __VEDV_SCRIPT_NAME="$(basename "${0}")"
readonly __VEDV_DIST_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
readonly __VEDV_LIB_PATH="${__VEDV_DIST_PATH}/lib/vedv"
readonly __VEDV_COMPONENTS_PATH="${__VEDV_DIST_PATH}/lib/vedv/components"
readonly __VEDV_HYPERVISORS_PATH="${__VEDV_DIST_PATH}/lib/vedv/hypervisors"

# INCLUDE
. "${__VEDV_LIB_PATH}/utils.bash"
. "${__VEDV_LIB_PATH}/vedv.bash"
for f in "${__VEDV_COMPONENTS_PATH}/"*/*.bash; do . "$f"; done

# COMMANDS

# OPTIONS
vedv::__help() {
  cat <<-HELPMSG
Usage:
${__VEDV_SCRIPT_NAME} [HYPERVISOR] COMMAND

A tool for developing with reproducible virtual machines environments

Options:
  -h, --help       Show this help

Commands:
  container        Manage containers
  image            Manage images
  build            Build an image from a Dockerfile

Run '${__VEDV_SCRIPT_NAME} COMMAND --help' for more information on a command.
HELPMSG
}

vedv::__on_exit() {
  # shellcheck disable=SC2181
  if [[ $? != 0 ]]; then
    vedv::__help
  fi
}
# trap vedv::__on_exit INT TERM EXIT

vedv::__run_cmd() {
  # IMPL: test this function

  [[ $# == 0 ]] && set -- '-h'

  if [[ "${1:-}" == @(-h|--help) ]]; then
    vedv::__help
    return 0
  fi

  local hypervisor=''

  case "${1:-}" in
  vbox)
    shift
    readonly hypervisor='virtualbox'
    ;;
  qemu)
    shift
    readonly hypervisor='qemu'
    ;;
  *)
    readonly hypervisor='virtualbox'
    ;;
  esac

  # include hypervisor
  . "${__VEDV_HYPERVISORS_PATH}/${hypervisor}.bash"

  # initialize components
  vedv::image_service::constructor "$hypervisor"
  vedv::image_command::constructor "$__VEDV_SCRIPT_NAME"

  vedv::container_service::constructor "$hypervisor"
  vedv::container_command::constructor "$__VEDV_SCRIPT_NAME"

  # parse arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
    # OPTIONS
    # COMMANDS
    image)
      shift
      vedv::image_command::run_cmd "$@" # implemented
      return $?
      ;;
    container)
      shift
      vedv::container_command::run_cmd "$@"
      return $?
      ;;
    # ERROR
    *)
      echo -e "Invalid parameter: ${1}\n" >&2
      vedv::__help
      return 10
      ;;
    esac
  done
}

vedv::main() {
  vedv::__run_cmd "$@"
}

if [[ "${BASH_SOURCE[0]}" = "${0}" ]]; then
  vedv::main "$@"
  exit $?
fi
