#!/usr/bin/env bash

#
# A tool for developing with reproducible virtual machines environments
#

set -eu

# CONSTANTS
readonly __VEDV_SCRIPT_NAME="$(basename "${0}")"
readonly __VEDV_DIST_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
readonly __VEDV_LIB_PATH="${__VEDV_DIST_PATH}/lib/vedv"
readonly __VEDV_COMPONENTS_PATH="${__VEDV_DIST_PATH}/lib/vedv/components"
readonly __VEDV_HYPERVISORS_PATH="${__VEDV_DIST_PATH}/lib/vedv/hypervisors"
readonly VEDV_CONFIG_DIR="${__VEDV_DIST_PATH}/etc/vedv"
readonly VEDV_CONFIG="${VEDV_CONFIG_DIR}/vedv.env"

if [[ -f "$VEDV_CONFIG" ]]; then source "$VEDV_CONFIG"; fi

# ENVIRONMENT
: "${VEDV_HADOLINT_ENABLED:="${HADOLINT_ENABLED:-true}"}"
: "${VEDV_HADOLINT_CONFIG:="${HADOLINT_CONFIG:-"${VEDV_CONFIG_DIR}/hadolint.yaml"}"}"
: "${VEDV_SSH_USER:="${SSH_USER:-vedv}"}"
: "${VEDV_SSH_PASSWORD:="${SSH_PASSWORD:-"$VEDV_SSH_USER"}"}"
: "${VEDV_SSH_IP:="${SSH_IP:-127.0.0.1}"}"
: "${VEDV_BASE_VEDVFILEIGNORE:="${BASE_VEDVFILEIGNORE:-"${VEDV_CONFIG_DIR}/vedvfileignore"}"}"

# INCLUDE
. "${__VEDV_LIB_PATH}/utils.bash"
. "${__VEDV_LIB_PATH}/ssh-client.bash"
. "${__VEDV_LIB_PATH}/vedv.bash"
for f in "${__VEDV_COMPONENTS_PATH}/"*/*.bash; do . "$f"; done

# COMMANDS

# OPTIONS
vedv::__help() {
  cat <<-HELPMSG
Usage:
${__VEDV_SCRIPT_NAME} [HYPERVISOR] COMMAND

A tool for developing with reproducible virtual machines environments

Options:
  -h, --help       Show this help

Commands:
  container        Manage containers
  image            Manage images
  build            Build an image from a Dockerfile

Run '${__VEDV_SCRIPT_NAME} COMMAND --help' for more information on a command.
HELPMSG
}

vedv::__on_exit() {
  # shellcheck disable=SC2181
  if [[ $? != 0 ]]; then
    vedv::__help
  fi
}
# trap vedv::__on_exit INT TERM EXIT

vedv::__run_cmd() {
  # IMPL: test this function
  # TODO: change if [[ $# == 0 ]]; then; set -- '-h'; fi
  [[ $# == 0 ]] && set -- '-h'

  if [[ "${1:-}" == @(-h|--help) ]]; then
    vedv::__help
    return 0
  fi

  local hypervisor=''

  case "${1:-}" in
  vbox)
    shift
    readonly hypervisor='virtualbox'
    ;;
  qemu)
    shift
    readonly hypervisor='qemu'
    ;;
  *)
    readonly hypervisor='virtualbox'
    ;;
  esac

  # include hypervisor
  . "${__VEDV_HYPERVISORS_PATH}/${hypervisor}.bash"

  # initialize components

  vedv::image_entity::constructor "$hypervisor"
  vedv::image_cache_entity::constructor "$hypervisor"
  vedv::image_vedvfile_service::constructor "$hypervisor" "$VEDV_HADOLINT_ENABLED"

  local vedvfileignore_path=''

  if [[ -f "./.vedvfileignore" ]]; then
    vedvfileignore_path="${PWD}/.vedvfileignore"
  fi
  readonly vedvfileignore_path

  vedv::image_builder::constructor "$hypervisor" \
    "$VEDV_SSH_USER" \
    "$VEDV_SSH_PASSWORD" \
    "$VEDV_SSH_IP" \
    "$VEDV_BASE_VEDVFILEIGNORE" \
    "$vedvfileignore_path"

  vedv::image_service::constructor "$hypervisor" "$VEDV_SSH_IP"
  vedv::image_command::constructor "$__VEDV_SCRIPT_NAME"

  vedv::container_command::constructor "$__VEDV_SCRIPT_NAME"

  # parse arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
    # OPTIONS
    # COMMANDS
    image)
      shift
      vedv::image_command::run_cmd "$@" # implemented
      return $?
      ;;
    container)
      shift
      vedv::container_command::run_cmd "$@"
      return $?
      ;;
    *)
      # TODO: use err
      err "Invalid parameter: ${1}\n"
      vedv::__help
      return 10
      ;;
    esac
  done
}

vedv::main() {
  vedv::__run_cmd "$@"
}

if [[ "${BASH_SOURCE[0]}" = "${0}" ]]; then
  vedv::main "$@"
  exit $?
fi
