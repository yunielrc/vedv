#!/usr/bin/env bash

#
# A tool for developing in a secure and reproducible environment
#

set -eu

# FOR CODE COMPLETION
if false; then
  # lib
  . './../lib/vedv/utils.bash'
  . './../lib/vedv/ssh-client.bash'
  # __base
  . './../lib/vedv/components/__base/vmobj-service.bash'
  . './../lib/vedv/components/__base/vmobj-entity.bash'
  # builder
  . './../lib/vedv/components/builder/builder-service.bash'
  . './../lib/vedv/components/builder/builder-vedvfile-service.bash'
  # image
  . './../lib/vedv/components/image/image-service.bash'
  . './../lib/vedv/components/image/image-entity.bash'
  . './../lib/vedv/components/image/image-command.bash'
  # container
  . './../lib/vedv/components/container/container-service.bash'
  . './../lib/vedv/components/container/container-entity.bash'
  . './../lib/vedv/components/container/container-command.bash'
  # registry
  . './../lib/vedv/components/registry/registry-api-client.bash'
  . './../lib/vedv/components/registry/registry-service.bash'
  . './../lib/vedv/components/registry/registry-command.bash'
  ## nextcloud
  . './../lib/vedv/components/registry/nextcloud/registry-nextcloud-api-client.bash'
fi

# CONSTANTS
readonly __VEDV_SCRIPT_NAME="${BASH_SOURCE[0]##*/}"
readonly __VEDV_DIST_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
readonly __VEDV_LIB_PATH="${__VEDV_DIST_PATH}/usr/lib/vedv"
readonly __VEDV_COMPONENTS_PATH="${__VEDV_LIB_PATH}/components"
readonly __VEDV_HYPERVISORS_PATH="${__VEDV_LIB_PATH}/hypervisors"
readonly __VEDV_CONFIG_DIR="${__VEDV_DIST_PATH}/etc/vedv"
readonly __VEDV_CONFIG="${__VEDV_CONFIG_DIR}/vedv.env"
readonly __UA='User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36'

# LOAD CONFIG
if [[ -f "$__VEDV_CONFIG" ]]; then source "$__VEDV_CONFIG"; fi
if [[ -f ~/.vedv.env ]]; then source ~/.vedv.env; fi
if [[ -f .vedv.env ]]; then source .vedv.env; fi

# ENVIRONMENT
# scheme:        VAR="${ENVIRONMENT_VAR:-"${CONFIG_VAR:-default}"}"
# e.g.: readonly VEDV_VAR="${VEDV_VAR:-"${VAR:-default}"}"
readonly VEDV_HADOLINT_ENABLED="${VEDV_HADOLINT_ENABLED:-"${HADOLINT_ENABLED:-false}"}"
readonly VEDV_HADOLINT_CONFIG="${VEDV_HADOLINT_CONFIG:-"${HADOLINT_CONFIG:-"${__VEDV_CONFIG_DIR}/hadolint.yaml"}"}"
readonly VEDV_SSH_USER="${VEDV_SSH_USER:-"${SSH_USER:-vedv}"}"
readonly VEDV_SSH_PASSWORD="${VEDV_SSH_PASSWORD:-"${SSH_PASSWORD:-"$VEDV_SSH_USER"}"}"
readonly VEDV_SSH_IP="${VEDV_SSH_IP:-"${SSH_IP:-127.0.0.1}"}"
readonly VEDV_BASE_VEDVFILEIGNORE="${VEDV_BASE_VEDVFILEIGNORE:-"${BASE_VEDVFILEIGNORE:-"${__VEDV_CONFIG_DIR}/vedvfileignore"}"}"
readonly VEDV_HYPERVISOR_FRONTEND="${VEDV_HYPERVISOR_FRONTEND:-"${HYPERVISOR_FRONTEND:-headless}"}"
readonly VEDV_DEFAULT_HYPERVISOR="${VEDV_DEFAULT_HYPERVISOR:-"${DEFAULT_HYPERVISOR:-virtualbox}"}"
readonly VEDV_NO_WAIT_AFTER_BUILD="${VEDV_NO_WAIT_AFTER_BUILD:-"${NO_WAIT_AFTER_BUILD:-false}"}"
readonly VEDV_TMP_DIR="${VEDV_TMP_DIR:-"${TMP_DIR:-"/var/tmp/${USER}/vedv"}"}"
readonly VEDV_CACHE_DIR="${VEDV_CACHE_DIR:-"${CACHE_DIR:-"/home/${USER}/.var/cache/vedv"}"}"
readonly VEDV_IMAGE_IMPORTED_DIR="${VEDV_IMAGE_IMPORTED_DIR:-"${IMAGE_IMPORTED_DIR:-"${VEDV_TMP_DIR}/images/imported"}"}"
readonly VEDV_IMAGE_EXPORTED_DIR="${VEDV_IMAGE_EXPORTED_DIR:-"${IMAGE_EXPORTED_DIR:-"${VEDV_TMP_DIR}/images/exported"}"}"
readonly VEDV_MEMORY_CACHE_DIR="${VEDV_MEMORY_CACHE_DIR:-"${MEMORY_CACHE_DIR:-"/dev/shm/vedv-6d2566c564-${USER}"}"}"
readonly VEDV_USER_AGENT="${VEDV_USER_AGENT:-"${USER_AGENT:-"$__UA"}"}"

# REGISTRY
readonly VEDV_REGISTRY_CACHE_DIR="${VEDV_REGISTRY_CACHE_DIR:-"${REGISTRY_CACHE_DIR:-"${VEDV_CACHE_DIR}/registry"}"}"
## API CLIENT
readonly VEDV_REGISTRY_API_CLIENT="${VEDV_REGISTRY_API_CLIENT:-"${REGISTRY_API_CLIENT:-nextcloud}"}"
readonly VEDV_REGISTRY_API_CLIENT_CREDENTIALS_DICT_STR="\
${VEDV_REGISTRY_API_CLIENT_CREDENTIALS_DICT_STR:-"$REGISTRY_API_CLIENT_CREDENTIALS_DICT_STR"}"
readonly VEDV_REGISTRY_API_CLIENT_MAIN_URL="\
${VEDV_REGISTRY_API_CLIENT_MAIN_URL:-"$REGISTRY_API_CLIENT_MAIN_URL"}"
readonly VEDV_REGISTRY_API_CLIENT_CONNECT_TIMEOUT="${VEDV_REGISTRY_API_CLIENT_CONNECT_TIMEOUT:-"${REGISTRY_API_CLIENT_CONNECT_TIMEOUT:-10}"}"
# IMAGE
readonly VEDV_CHANGE_PASSWORD_ON_IMPORT="${VEDV_CHANGE_PASSWORD_ON_IMPORT:-"${CHANGE_PASSWORD_ON_IMPORT:-false}"}"
readonly VEDV_NO_CHANGE_PASSWORD_ON_EXPORT="${VEDV_NO_CHANGE_PASSWORD_ON_EXPORT:-"${NO_CHANGE_PASSWORD_ON_EXPORT:-false}"}"
# SSH CLIENT
readonly VEDV_SSH_CLIENT_CONNECTION_TIMEOUT="${VEDV_SSH_CLIENT_CONNECTION_TIMEOUT:-"${SSH_CLIENT_CONNECTION_TIMEOUT:-5}"}"

# CREATE DIRECTORIES
vedv::__create_dirs() {

  local -a vedv_dirs_arr=(
    "$VEDV_TMP_DIR"
    "$VEDV_CACHE_DIR"
    "$VEDV_IMAGE_IMPORTED_DIR"
    "$VEDV_IMAGE_EXPORTED_DIR"
    "$VEDV_MEMORY_CACHE_DIR"
    "$VEDV_REGISTRY_CACHE_DIR"
  )

  for dir in "${vedv_dirs_arr[@]}"; do
    if [[ ! -d "$dir" ]]; then
      mkdir -p "$dir" || return $?
    fi
  done
}

# INCLUDE SOURCE FILES
vedv::__include_files() {
  . "${__VEDV_LIB_PATH}/utils.bash"
  . "${__VEDV_LIB_PATH}/ssh-client.bash"
  . "${__VEDV_LIB_PATH}/file-downloader.bash"

  for f in "${__VEDV_COMPONENTS_PATH}/"*/*.bash; do . "$f"; done
  # the specific api client must be included after the generic registry-api-client
  # because it overrides some functions
  . "${__VEDV_COMPONENTS_PATH}/registry/${VEDV_REGISTRY_API_CLIENT}/\
registry-${VEDV_REGISTRY_API_CLIENT}-api-client.bash"
}

# INITIALIZE COMPONENTS
vedv::__initialize_components() {
  # lib
  utils::constructor "$VEDV_TMP_DIR" "$VEDV_USER_AGENT"

  file_downloader::constructor "$VEDV_USER_AGENT"

  vedv::ssh_client::constructor \
    "$VEDV_SSH_CLIENT_CONNECTION_TIMEOUT"

  # __base
  local -r vmobj_types='container|image'
  # shellcheck disable=SC2034
  local -rA vmobj_types_attributes_dict=(
    [image]="$VEDV_IMAGE_ENTITY_VALID_ATTRIBUTES"
    [container]="$VEDV_CONTAINER_ENTITY_VALID_ATTRIBUTES"
  )

  vedv::vmobj_entity::constructor \
    "$VEDV_MEMORY_CACHE_DIR" \
    "$vmobj_types" \
    "$(arr2str vmobj_types_attributes_dict)" \
    "$VEDV_SSH_USER" \
    "$VEDV_SSH_PASSWORD"
  # shellcheck disable=SC2034
  local -rA vedv_vmobj_service_use_cache_dict=([container]=true [image]=true)

  vedv::vmobj_service::constructor \
    "$VEDV_SSH_IP" \
    "$VEDV_SSH_USER" \
    "$(arr2str vedv_vmobj_service_use_cache_dict)"

  # builder
  local vedvfileignore_path=''
  if [[ -f "./.vedvfileignore" ]]; then
    vedvfileignore_path="${PWD}/.vedvfileignore"
  fi
  readonly vedvfileignore_path

  vedv::builder_vedvfile_service::constructor \
    "$VEDV_HADOLINT_CONFIG" \
    "$VEDV_HADOLINT_ENABLED" \
    "$VEDV_BASE_VEDVFILEIGNORE" \
    "$vedvfileignore_path"

  vedv::builder_command::constructor \
    "$__VEDV_SCRIPT_NAME"

  vedv::builder_service::constructor \
    "$VEDV_MEMORY_CACHE_DIR" \
    "$VEDV_NO_WAIT_AFTER_BUILD"

  # image
  vedv::image_service::constructor \
    "$VEDV_IMAGE_IMPORTED_DIR" \
    "$VEDV_CHANGE_PASSWORD_ON_IMPORT" \
    "$VEDV_NO_CHANGE_PASSWORD_ON_EXPORT"

  vedv::image_command::constructor "$__VEDV_SCRIPT_NAME"

  # container
  vedv::container_command::constructor "$__VEDV_SCRIPT_NAME"

  # registry
  vedv::registry_api_client::constructor \
    "$VEDV_REGISTRY_API_CLIENT_CREDENTIALS_DICT_STR" \
    "$VEDV_REGISTRY_API_CLIENT_MAIN_URL" \
    "$VEDV_REGISTRY_API_CLIENT_CONNECT_TIMEOUT"

  vedv::registry_service::constructor \
    "$VEDV_REGISTRY_CACHE_DIR" \
    "$VEDV_IMAGE_EXPORTED_DIR"
  vedv::registry_command::constructor "$__VEDV_SCRIPT_NAME"
}

# COMMANDS
vedv::__help() {
  cat <<-HELPMSG
Usage:
${__VEDV_SCRIPT_NAME} COMMAND

A tool for developing in a secure and reproducible environment

Flags:
  -h, --help    show this help

Management Commands:
  container     manage containers
  image         manage images
  builder       manage builder
  registry      manage registry

Run '${__VEDV_SCRIPT_NAME} COMMAND --help' for more information on a command.
HELPMSG
}

vedv::__on_exit() {
  vedv::builder_service::on_exit
}
trap vedv::__on_exit INT TERM EXIT

vedv::__run_cmd() {
  if [[ $# == 0 ]]; then set -- '-h'; fi

  if [[ "$1" == @(-h|--help) ]]; then
    vedv::__help
    return 0
  fi

  local hypervisor=''

  case "${1:-}" in
  vbox | virtualbox)
    shift
    readonly hypervisor='virtualbox'
    ;;
  qemu)
    shift
    readonly hypervisor='qemu'

    err "QEMU is not supported yet\n"
    return "$ERR_NOTIMPL"
    ;;
  *)
    readonly hypervisor="$VEDV_DEFAULT_HYPERVISOR"
    ;;
  esac
  # include hypervisor
  . "${__VEDV_HYPERVISORS_PATH}/${hypervisor}.bash"
  # initialize hypervisor
  vedv::hypervisor::constructor "$VEDV_HYPERVISOR_FRONTEND"

  # parse arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
    # arguments
    builder)
      shift
      vedv::builder_command::run_cmd "$@"
      return $?
      ;;
    image)
      shift
      vedv::image_command::run_cmd "$@"
      return $?
      ;;
    container)
      shift
      vedv::container_command::run_cmd "$@"
      return $?
      ;;
    registry)
      shift
      vedv::registry_command::run_cmd "$@"
      return $?
      ;;
    *)
      err "Invalid argument: ${1}\n"
      vedv::__help
      return "$ERR_INVAL_ARG"
      ;;
    esac
  done
}

vedv::main() {
  vedv::__create_dirs
  vedv::__include_files
  vedv::__initialize_components

  vedv::__run_cmd "$@"
}

if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
  vedv::main "$@"
fi
