#!/usr/bin/env bash

#
# A tool for developing in a secure and reproducible environment
#

set -eu

# FOR CODE COMPLETION
if false; then
  # __base
  . './../../lib/vedv/components/__base/vmobj-service.bash'
  . './../../lib/vedv/components/__base/vmobj-entity.bash'
  # image
  . './../../lib/vedv/components/image/image-service.bash'
  . './../../lib/vedv/components/image/image-entity.bash'
  . './../../lib/vedv/components/image/image-command.bash'
  . './../../lib/vedv/components/image/image-builder.bash'
  . './../../lib/vedv/components/image/image-vedvfile-service.bash'
  # container
  . './../../lib/vedv/components/container/container-service.bash'
  . './../../lib/vedv/components/container/container-entity.bash'
  . './../../lib/vedv/components/container/container-command.bash'
fi

# CONSTANTS
readonly __VEDV_SCRIPT_NAME="$(basename "$0")"
readonly __VEDV_DIST_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
readonly __VEDV_LIB_PATH="${__VEDV_DIST_PATH}/lib/vedv"
readonly __VEDV_COMPONENTS_PATH="${__VEDV_DIST_PATH}/lib/vedv/components"
readonly __VEDV_HYPERVISORS_PATH="${__VEDV_DIST_PATH}/lib/vedv/hypervisors"
readonly __VEDV_CONFIG_DIR="${__VEDV_DIST_PATH}/etc/vedv"
readonly __VEDV_CONFIG="${__VEDV_CONFIG_DIR}/vedv.env"

# CONFIG
if [[ -f "$__VEDV_CONFIG" ]]; then source "$__VEDV_CONFIG"; fi

# ENVIRONMENT
# scheme:        VAR="${ENVIRONMENT_VAR:-"${CONFIG_VAR:-default}"}"
# e.g.: readonly VEDV_VAR="${VEDV_VAR:-"${VAR:-default}"}"
readonly VEDV_HADOLINT_ENABLED="${VEDV_HADOLINT_ENABLED:-"${HADOLINT_ENABLED:-true}"}"
readonly VEDV_HADOLINT_CONFIG="${VEDV_HADOLINT_CONFIG:-"${HADOLINT_CONFIG:-"${__VEDV_CONFIG_DIR}/hadolint.yaml"}"}"
readonly VEDV_SSH_USER="${VEDV_SSH_USER:-"${SSH_USER:-vedv}"}"
readonly VEDV_SSH_PASSWORD="${VEDV_SSH_PASSWORD:-"${SSH_PASSWORD:-"$VEDV_SSH_USER"}"}"
readonly VEDV_SSH_IP="${VEDV_SSH_IP:-"${SSH_IP:-127.0.0.1}"}"
readonly VEDV_BASE_VEDVFILEIGNORE="${VEDV_BASE_VEDVFILEIGNORE:-"${BASE_VEDVFILEIGNORE:-"${__VEDV_CONFIG_DIR}/vedvfileignore"}"}"
readonly VEDV_HYPERVISOR_FRONTEND="${VEDV_HYPERVISOR_FRONTEND:-"${HYPERVISOR_FRONTEND:-headless}"}"
readonly VEDV_DEFAULT_HYPERVISOR="${VEDV_DEFAULT_HYPERVISOR:-"${DEFAULT_HYPERVISOR:-virtualbox}"}"

# INCLUDE
. "${__VEDV_LIB_PATH}/utils.bash"
. "${__VEDV_LIB_PATH}/ssh-client.bash"
. "${__VEDV_LIB_PATH}/vedv.bash"
for f in "${__VEDV_COMPONENTS_PATH}/"*/*.bash; do . "$f"; done

# COMMANDS
vedv::__help() {
  cat <<-HELPMSG
Usage:
${__VEDV_SCRIPT_NAME} [HYPERVISOR] COMMAND

A tool for developing in a secure and reproducible environment

Flags:
  -h, --help    show this help

Management Commands:
  container     manage containers
  image         manage images

Run '${__VEDV_SCRIPT_NAME} COMMAND --help' for more information on a command.
HELPMSG
}

vedv::__on_exit() {
  # shellcheck disable=SC2181
  if [[ $? != 0 ]]; then
    vedv::__help
  fi
}
# trap vedv::__on_exit INT TERM EXIT

vedv::__run_cmd() {
  # IMPL: test this function
  if [[ $# == 0 ]]; then set -- '-h'; fi

  if [[ "$1" == @(-h|--help) ]]; then
    vedv::__help
    return 0
  fi

  local hypervisor=''

  case "${1:-}" in
  vbox)
    shift
    readonly hypervisor='virtualbox'
    ;;
  qemu)
    shift
    readonly hypervisor='qemu'
    ;;
  *)
    readonly hypervisor="$VEDV_DEFAULT_HYPERVISOR"
    ;;
  esac

  # include hypervisor
  . "${__VEDV_HYPERVISORS_PATH}/${hypervisor}.bash"

  # initialize components
  vedv::hypervisor::constructor "$VEDV_HYPERVISOR_FRONTEND"

  local vedvfileignore_path=''

  if [[ -f "./.vedvfileignore" ]]; then
    vedvfileignore_path="${PWD}/.vedvfileignore"
  fi
  readonly vedvfileignore_path

  vedv::image_vedvfile_service::constructor \
    "$VEDV_HADOLINT_CONFIG" \
    "$VEDV_HADOLINT_ENABLED" \
    "$VEDV_BASE_VEDVFILEIGNORE" \
    "$vedvfileignore_path"

  local -r vmobj_types='container|image'
  # shellcheck disable=SC2034
  local -rA vmobj_types_attributes_dict=(
    [image]="$VEDV_IMAGE_ENTITY_VALID_ATTRIBUTES"
    [container]="$VEDV_CONTAINER_ENTITY_VALID_ATTRIBUTES"
  )

  vedv::vmobj_entity::constructor \
    "$vmobj_types" \
    "$(arr2str vmobj_types_attributes_dict)" \
    "$VEDV_SSH_USER"
  # shellcheck disable=SC2034
  local -rA vedv_vmobj_service_use_cache_dict=([container]=true [image]=true)

  vedv::vmobj_service::constructor \
    "$VEDV_SSH_IP" \
    "$VEDV_SSH_USER" \
    "$VEDV_SSH_PASSWORD" \
    "$(arr2str vedv_vmobj_service_use_cache_dict)"

  vedv::image_command::constructor "$__VEDV_SCRIPT_NAME"

  vedv::container_command::constructor "$__VEDV_SCRIPT_NAME"

  # parse arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
    # OPTIONS
    # COMMANDS
    image)
      shift
      vedv::image_command::run_cmd "$@"
      return $?
      ;;
    container)
      shift
      vedv::container_command::run_cmd "$@"
      return $?
      ;;
    *)
      err "Invalid argument: ${1}\n"
      vedv::__help
      return "$ERR_INVAL_ARG"
      ;;
    esac
  done
}

vedv::main() {
  vedv::__run_cmd "$@"
}

if [[ "${BASH_SOURCE[0]}" = "$0" ]]; then
  vedv::main "$@"
fi
