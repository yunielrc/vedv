#!/usr/bin/env sh

# Configure the alpine linux image vm for vedv

set -eu

# CONSTANTS
readonly __VEDV_CONFIG_DIR='/etc/vedv-guest'

# ENVIRONMENT
readonly VEDV_USER="${VEDV_USER:-vedv}"
readonly VEDV_PASS="${VEDV_PASS:-vedv}"

# SETUP VEDV CONFIG
mkdir -p "${__VEDV_CONFIG_DIR}/layer"
# define linux distro
echo 'alpine' >"${__VEDV_CONFIG_DIR}/distro"
chmod 0444 "${__VEDV_CONFIG_DIR}/distro"
# create environment file
touch "${__VEDV_CONFIG_DIR}/layer/env"
# create expose file
touch "${__VEDV_CONFIG_DIR}/layer/expose"
# link /etc/profile.d/vedv-env.sh to vedv environment file
ln -sf "${__VEDV_CONFIG_DIR}/layer/env" /etc/profile.d/vedv-env.sh
# create workdir file
touch "${__VEDV_CONFIG_DIR}/layer/workdir"
# create shell file
touch "${__VEDV_CONFIG_DIR}/layer/shell"

# ADD USER
adduser --disabled-password "$VEDV_USER"
echo "${VEDV_USER}:${VEDV_PASS}" | chpasswd
# define default user
echo "$VEDV_USER" >"${__VEDV_CONFIG_DIR}/layer/user"

# CHANGE ROOT PASSWORD
echo "root:${VEDV_PASS}" | chpasswd

# ENABLE COMMUNITY REPOSITORY
readonly COMMUNITY_REPO="$(grep 'alpine/v.*/community' /etc/apk/repositories | sed 's/\//\\\//g')"
readonly ENABLED_COMMUNITY_REPO="$(echo "$COMMUNITY_REPO/" | sed 's/^#//')"
sed -i "s/${COMMUNITY_REPO}/${ENABLED_COMMUNITY_REPO}" /etc/apk/repositories

# INSTALL SUDO
apk add -U sudo
# configure sudoers
echo "%wheel ALL=(ALL) NOPASSWD: ALL" >/etc/sudoers.d/wheel-nopasswd
chmod 0440 /etc/sudoers.d/wheel-nopasswd
adduser "$VEDV_USER" wheel

# INSTALL USERMOD
apk add shadow

# INSTALL OPENSSH
apk add openssh
# configure sshd
rc-update add sshd

sed -i \
  -e 's/^#\?\s*PermitRootLogin .*/PermitRootLogin yes/' \
  -e 's/^#\?\s*PasswordAuthentication .*/PasswordAuthentication yes/' \
  /etc/ssh/sshd_config

service sshd restart

# INSTALL RSYNC
apk add rsync
# configure rsyncd
rc-update add rsyncd
service rsyncd start

# INSTALL BASH
apk add bash

# ADD VEDV STANDARD SCRIPTS

# add vedv-adduser script
cat <<'EOF' >/usr/local/bin/vedv-adduser
#!/usr/bin/env bash
#
# Add a user to the system
#

set -eu

if [[ "$#" -ne 2 ]]; then
  echo "usage: vedv-adduser <username> <password>" >&2
  exit 1
fi

readonly VEDV_USER="$1"
readonly VEDV_PASS="$2"

if id "$VEDV_USER" &>/dev/null; then
  echo "user '${VEDV_USER}' already exists"
  exit 0
fi

adduser --disabled-password "$VEDV_USER"
echo "${VEDV_USER}:${VEDV_PASS}" | chpasswd
adduser "$VEDV_USER" wheel

usermod -s "$(vedv-getshell)" "$VEDV_USER"
EOF

chmod 0755 /usr/local/bin/vedv-adduser

# add vedv-setuser script
cat <<EOF >/usr/local/bin/vedv-setuser
#!/usr/bin/env bash
#
# Set default vedv user
#

set -eu

if [[ "\$#" -ne 1 ]]; then
  echo "usage: vedv-setuser <username>" >&2
  exit 1
fi

readonly VEDV_USER="\$1"

if ! id "\$VEDV_USER" &>/dev/null; then
  echo "user '\${VEDV_USER}' does not exist" >&2
  exit 1
fi

echo "\$VEDV_USER" >"${__VEDV_CONFIG_DIR}/layer/user"

readonly workdir="\$(vedv-getworkdir)"

if [[ -n "\$workdir" ]]; then
  chown -R "\${VEDV_USER}:\${VEDV_USER}" "\$workdir"
fi
EOF

chmod 0755 /usr/local/bin/vedv-setuser

# add vedv-getuser script
cat <<EOF >/usr/local/bin/vedv-getuser
#!/usr/bin/env sh
#
# Get default vedv user
#

cat "${__VEDV_CONFIG_DIR}/layer/user"
EOF

chmod 0755 /usr/local/bin/vedv-getuser

# add vedv-setworkdir script
cat <<EOF >/usr/local/bin/vedv-setworkdir
#!/usr/bin/env bash
#
# Set workdir
#

set -eu

if [[ "\$#" -ne 2 ]]; then
  echo "usage: vedv-setworkdir <workdir> <owner>" >&2
  exit 1
fi

readonly VEDV_WORKDIR="\$1"
readonly VEDV_OWNER="\$2"

if ! id "\$VEDV_OWNER" &>/dev/null; then
  echo "user '\${VEDV_OWNER}' does not exist" >&2
  exit 1
fi

readonly VEDV_OWNER_HOME="\$(eval echo ~"\$VEDV_OWNER")"
cd "\$VEDV_OWNER_HOME" || exit 1

if [[ ! -d "\$VEDV_WORKDIR" ]]; then
  mkdir -p "\$VEDV_WORKDIR"
fi
chown -R "\${VEDV_OWNER}:\${VEDV_OWNER}" "\$VEDV_WORKDIR"

readonly FULL_VEDV_WORKDIR="\$(realpath "\$VEDV_WORKDIR")"

echo "\$FULL_VEDV_WORKDIR" >"${__VEDV_CONFIG_DIR}/layer/workdir"

echo "\$FULL_VEDV_WORKDIR"
EOF

chmod 0755 /usr/local/bin/vedv-setworkdir

# add vedv-getworkdir script
cat <<EOF >/usr/local/bin/vedv-getworkdir
#!/usr/bin/env sh
#
# Get workdir
#

cat "${__VEDV_CONFIG_DIR}/layer/workdir"
EOF

chmod 0755 /usr/local/bin/vedv-getworkdir

# add the environment variable NAME=nalyd to all users
cat <<EOF >/usr/local/bin/vedv-addenv_var
#!/usr/bin/env bash
#
# Add an environment variable to all users
#

set -eu

if [[ "\$#" -ne 1 ]]; then
  echo "usage: vedv-addenv_var <NAME=value>" >&2
  exit 1
fi

readonly VEDV_ENV_VAR="\$1"

readonly sh_var_regex='^[a-zA-Z_][a-zA-Z0-9_]*=[^=].+$'

if [[ ! "\$VEDV_ENV_VAR" =~ \$sh_var_regex ]]; then
  echo "env_var it's not a valid sh variable" >&2
  exit 1
fi

echo "\$VEDV_ENV_VAR" >>"${__VEDV_CONFIG_DIR}/layer/env"
EOF

chmod 0755 /usr/local/bin/vedv-addenv_var

# get the environment variables
cat <<EOF >/usr/local/bin/vedv-getenv_vars
#!/usr/bin/env sh
#
# Get the environment variables
#

cat "${__VEDV_CONFIG_DIR}/layer/env"
EOF

chmod 0755 /usr/local/bin/vedv-getenv_vars

# add vedv-setshell script
cat <<EOF >/usr/local/bin/vedv-setshell
#!/usr/bin/env bash
#
# Set default shell
#

set -eu

if [[ "\$#" -ne 1 ]]; then
  echo "usage: vedv-setshell <shell>" >&2
  exit 1
fi

readonly VEDV_SHELL="\$1"

if ! command -v "\$VEDV_SHELL" &>/dev/null; then
  echo "shell '\${VEDV_SHELL}' does not exist" >&2
  exit 1
fi

readonly VEDV_SHELL_FILE="\$(command -v "\$VEDV_SHELL")"

for user in root \$(getent passwd | grep ':/home' | cut -f1 -d:); do
  usermod -s "\$VEDV_SHELL_FILE" "\$user"
done

echo "\$VEDV_SHELL_FILE" >"${__VEDV_CONFIG_DIR}/layer/shell"
EOF

chmod 0755 /usr/local/bin/vedv-setshell

# add vedv-getshell script
cat <<EOF >/usr/local/bin/vedv-getshell
#!/usr/bin/env sh
#
# Get default vedv shell
#

cat "${__VEDV_CONFIG_DIR}/layer/shell"
EOF

chmod 0755 /usr/local/bin/vedv-getshell

# add expose ports
cat <<EOF >/usr/local/bin/vedv-addexpose_ports
#!/usr/bin/env bash
#
# Add expose ports
#

set -eu

if [[ "\$#" -eq 0 ]]; then
  echo "usage: vedv-addexpose_ports <EXPOSE_PORT1> [EXPOSE_PORT2] [...]" >&2
  exit 1
fi

readonly EXPOSE_PORTS="\$*"

readonly EXPOSE_PORTS_REGEX='^[[:digit:]]+(/(tcp|udp))?([[:space:]]+[[:digit:]]+(/(tcp|udp))?)*$'

if [[ ! "\$EXPOSE_PORTS" =~ \$EXPOSE_PORTS_REGEX ]]; then
  echo "expose ports are invalid" >&2
  exit 1
fi

readonly EXPOSE_FILE="${__VEDV_CONFIG_DIR}/layer/expose"

IFS=' ' read -ra EXPOSE_PORTS_ARR <<<"\$EXPOSE_PORTS"
{
  for port in "\${EXPOSE_PORTS_ARR[@]}"; do
    if [[ "\$port" =~ ^[[:digit:]]+$ ]]; then
      echo "\$port/tcp"
      continue
    fi
    echo "\$port"
  done
} >>"\$EXPOSE_FILE"
# sort and remove duplicates ignoring case
readonly TMP_FILE="\$(mktemp)"
sort -f -u "\$EXPOSE_FILE" >"\$TMP_FILE"
mv "\$TMP_FILE" "\$EXPOSE_FILE"
EOF

chmod 0755 /usr/local/bin/vedv-addexpose_ports

# get expose ports
cat <<EOF >/usr/local/bin/vedv-getexpose_ports
#!/usr/bin/env sh
#
# Get expose ports
#

cat "${__VEDV_CONFIG_DIR}/layer/expose"
EOF

chmod 0755 /usr/local/bin/vedv-getexpose_ports

echo '>> DONE!'
